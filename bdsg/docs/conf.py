# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('../../lib/'))

# We need to check if libbdsg is built, but we can't `import bdsg` because
# if we don't find it, we can't import it again later once we make it.
# So just poll for ../lib/bdsg.module flag file from the build process.
if not os.path.exists('../../lib/bdsg.module'):
    # libbdsg isn't built yet. See if we can build it.
    # Hack to try and get the build to run on RtD which doesn't give us command-running hooks.
    import subprocess
    
    # Building will need CMake; is it installed?
    try:
        subprocess.check_call(['cmake', '--version'])
    except FileNotFoundError:
        # Nope, no cmake. Try getting it.
        # On RtD we don't have root so we need to grab CMake ourselves.
        if not os.path.exists('cmake-3.17.0-Linux-x86_64'):
            subprocess.check_call(['wget', 'https://github.com/Kitware/CMake/releases/download/v3.17.0/cmake-3.17.0-Linux-x86_64.tar.gz'])
            subprocess.check_call(['tar', '-xf', 'cmake-3.17.0-Linux-x86_64.tar.gz'])
            os.rename('cmake-3.17.0-Linux-x86_64', 'cmake')
        # Make sure subprocess can find it
        os.environ['PATH'] += ':' + os.path.join(os.getcwd(), 'cmake', 'bin')
    
    # Use Make to call out to cmake and build the project so we can import and
    # document it.
    subprocess.check_call(['make', 'sphinxprep'])
    
    # Make sure we really can import it, or fail the whole build
    import bdsg

# -- Project information -----------------------------------------------------

project = u'bdsg'
copyright = u'2020, vgteam'
author = u'vgteam'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u''

# -- Breathe Configuration ---------------------------------------------------

breathe_projects = { "bdsg": "../build/doxygen/xml" }
breathe_default_project = "bdsg"

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'breathe']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['venv/*', 'cmake/*', '_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'
html_theme_path = ["_themes",]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'bdsgdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'bdsg.tex', u'bdsg Documentation',
     u'vgteam', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'bdsg', u'bdsg Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'bdsg', u'bdsg Documentation',
     author, 'bdsg', 'Bi-Directed Sequence Graph library.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']
