// UNGUARDED CODE FRAGMENT FOR PROXY CODE GENERATION!
// Meant to be included inside a class!
// Nobody tell Doxygen!

// Methods needed for implementing HandleGraph

#ifdef BDSG_INSIDE_CLASS

public:
    // These methods implement the handle graph API in terms of just calling
    // the same methods on the backing graph, hoping that the types work out
    // given what we've been templated on.
    
    /// Method to check if a node exists by ID
    bool has_node(nid_t node_id) const {
        return this->get()->has_node(node_id);
    }
   
    /// Look up the handle for the node with the given ID in the given orientation
    virtual handle_t get_handle(const nid_t& node_id, bool is_reverse = false) const {
        return this->get()->get_handle(node_id, is_reverse);
    }
    
    /// Get the ID from a handle
    virtual nid_t get_id(const handle_t& handle) const {
        return this->get()->get_id(handle);
    }
    
    /// Get the orientation of a handle
    virtual bool get_is_reverse(const handle_t& handle) const {
        return this->get()->get_is_reverse(handle);
    }
    
    /// Invert the orientation of a handle (potentially without getting its ID)
    virtual handle_t flip(const handle_t& handle) const {
        return this->get()->flip(handle);
    }
    
    /// Get the length of a node
    virtual size_t get_length(const handle_t& handle) const {
        return this->get()->get_length(handle);
    }
    
    /// Get the sequence of a node, presented in the handle's local forward
    /// orientation.
    virtual std::string get_sequence(const handle_t& handle) const {
        return this->get()->get_sequence(handle);
    }
    
    /// Return the number of nodes in the graph
    virtual size_t get_node_count() const {
        return this->get()->get_node_count();
    }
    
    /// Return the smallest ID in the graph, or some smaller number if the
    /// smallest ID is unavailable. Return value is unspecified if the graph is empty.
    virtual nid_t min_node_id() const {
        return this->get()->min_node_id();
    }
    
    /// Return the largest ID in the graph, or some larger number if the
    /// largest ID is unavailable. Return value is unspecified if the graph is empty.
    virtual nid_t max_node_id() const {
        return this->get()->max_node_id();
    }
    
    /// Get the number of edges on the right (go_left = false) or left (go_left
    /// = true) side of the given handle. The default implementation is O(n) in
    /// the number of edges returned, but graph implementations that track this
    /// information more efficiently can override this method.
    virtual size_t get_degree(const handle_t& handle, bool go_left) const {
        return this->get()->get_degree(handle, go_left);
    }
    
    /// Returns true if there is an edge that allows traversal from the left
    /// handle to the right handle. By default O(n) in the number of edges
    /// on left, but can be overridden with more efficient implementations.
    virtual bool has_edge(const handle_t& left, const handle_t& right) const {
        return this->get()->has_edge(left, right);
    }
    
    /// Return the total number of edges in the graph. If not overridden,
    /// counts them all in linear time.
    virtual size_t get_edge_count() const {
        return this->get()->get_edge_count();
    }
    
    /// Return the total length of all nodes in the graph, in bp. If not
    /// overridden, loops over all nodes in linear time.
    virtual size_t get_total_length() const {
        return this->get()->get_total_length();
    }
    
    /// Returns one base of a handle's sequence, in the orientation of the
    /// handle.
    virtual char get_base(const handle_t& handle, size_t index) const {
        return this->get()->get_base(handle, index);
    }
    
    /// Returns a substring of a handle's sequence, in the orientation of the
    /// handle. If the indicated substring would extend beyond the end of the
    /// handle's sequence, the return value is truncated to the sequence's end.
    /// By default O(n) in the size of the handle's sequence, but can be overriden.
    virtual std::string get_subsequence(const handle_t& handle, size_t index, size_t size) const {
        return this->get()->get_subsequence(handle, index, size);
    }
    
protected:

    /// Loop over all the handles to next/previous (right/left) nodes. Passes
    /// them to a callback which returns false to stop iterating and true to
    /// continue. Returns true if we finished and false if we stopped early.
    virtual bool follow_edges_impl(const handle_t& handle, bool go_left, const std::function<bool(const handle_t&)>& iteratee) const {
        return this->get()->follow_edges(handle, go_left, iteratee);
    }
    
    /// Loop over all the nodes in the graph in their local forward
    /// orientations, in their internal stored order. Stop if the iteratee
    /// returns false. Can be told to run in parallel, in which case stopping
    /// after a false return value is on a best-effort basis and iteration
    /// order is not defined. Returns true if we finished and false if we 
    /// stopped early.
    virtual bool for_each_handle_impl(const std::function<bool(const handle_t&)>& iteratee, bool parallel = false) const {
        return this->get()->for_each_handle(iteratee, parallel);
    }

#endif
